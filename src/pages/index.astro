---
import Layout from '../layouts/Layout.astro';
---

<Layout title="upop - Alertas modernas para la web">
	<!-- Hero Section -->
	<section id="inicio" class="pt-32 pb-20">
		<div class="max-w-6xl mx-auto px-6 text-center">
			<div class="animate-fade-in-up">
				<h1 class="text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent leading-tight">
					upop
				</h1>
				<p class="text-xl md:text-2xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
					Librería moderna y minimalista para alertas, toasts y confirmaciones. 
					<span class="text-blue-600 font-semibold">Simple, elegante y poderosa.</span>
				</p>
				<div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
					<button id="demo-btn" class="px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200">
						Ver Demo
					</button>
					<a href="#instalacion" class="px-8 py-4 border-2 border-gray-300 text-gray-700 rounded-xl font-semibold hover:border-blue-500 hover:text-blue-600 transition-all duration-200">
						Comenzar
					</a>
				</div>
			</div>
		</div>
	</section>

	<!-- Installation Section -->
	<section id="instalacion" class="py-20 bg-white/30 backdrop-blur-sm">
		<div class="max-w-4xl mx-auto px-6">
			<h2 class="text-4xl font-bold text-center mb-12 text-gray-800">Instalación</h2>
			
			<div class="space-y-8">
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">1. Descarga los archivos</h3>
					<p class="text-gray-600 mb-4">Descarga <code class="bg-gray-100 px-2 py-1 rounded">upop.js</code> y <code class="bg-gray-100 px-2 py-1 rounded">upop.css</code> e inclúyelos en tu proyecto.</p>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-green-400 text-sm">
							npm install upop
						</code>
					</div>
				</div>

				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">2. Importa en tu HTML</h3>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-blue-300 text-sm">
							&lt;link rel="stylesheet" href="upop.css"&gt;<br>
							&lt;script src="upop.js" type="module"&gt;&lt;/script&gt;
						</code>
					</div>
				</div>
				
				<div class="space-y-8">
					<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
						<h3 class="text-2xl font-semibold mb-4 text-gray-800">Usando CDN</h3>
						<p class="text-gray-600 mb-4">Incluye los archivos directamente desde un CDN en tu proyecto:</p>
						<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto">
							<code class="text-green-400 text-sm">
								&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/upop@1.0.2/dist/upop.css"&gt;<br>
								&lt;script src="https://cdn.jsdelivr.net/npm/upop@1.0.2/dist/upop.js" type="module"&gt;&lt;/script&gt;
							</code>
						</div>
					</div>
				</div>

				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">3. Uso en Astro</h3>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-yellow-300 text-sm">
							import upop from './upop.js';<br><br>
							// Usar alertas<br>
							upop.alert.success('¡Operación exitosa!');
						</code>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Examples Section -->
	<section id="ejemplos" class="py-20">
		<div class="max-w-6xl mx-auto px-6">
			<h2 class="text-4xl font-bold text-center mb-12 text-gray-800">Ejemplos en Vivo</h2>
			
			<div class="grid md:grid-cols-3 gap-8">
				<!-- Alertas -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-6 text-gray-800">Alertas</h3>
					<div class="space-y-4">
						<button class="alert-demo w-full px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors" data-type="info">
							Info
						</button>
						<button class="alert-demo w-full px-4 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors" data-type="success">
							Éxito
						</button>
						<button class="alert-demo w-full px-4 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors" data-type="error">
							Error
						</button>
						<button class="alert-demo w-full px-4 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors" data-type="warning">
							Advertencia
						</button>
					</div>
					<div class="mt-6 bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-green-400 text-sm">
							upop.alert.success('¡Éxito!');
						</code>
					</div>
				</div>

				<!-- Toasts -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-6 text-gray-800">Toasts</h3>
					<div class="space-y-4">
						<button class="toast-demo w-full px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors" data-type="info">
							Toast Info
						</button>
						<button class="toast-demo w-full px-4 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors" data-type="success">
							Toast Éxito
						</button>
						<button class="toast-demo w-full px-4 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors" data-type="error">
							Toast Error
						</button>
						<button class="toast-demo w-full px-4 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors" data-type="warning">
							Toast Advertencia
						</button>
					</div>
					<div class="mt-6 bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-green-400 text-sm">
							upop.toast.info('Información');
						</code>
					</div>
				</div>

				<!-- Confirms -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-6 text-gray-800">Confirmaciones</h3>
					<div class="space-y-4">
						<button class="confirm-demo w-full px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors" data-type="info">
							Confirmar Info
						</button>
						<button class="confirm-demo w-full px-4 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors" data-type="success">
							Confirmar Éxito
						</button>
						<button class="confirm-demo w-full px-4 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors" data-type="error">
							Confirmar Error
						</button>
						<button class="confirm-demo w-full px-4 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors" data-type="warning">
							Confirmar Advertencia
						</button>
					</div>
					<div class="mt-6 bg-gray-900 rounded-xl p-4 overflow-x-auto">
						<code class="text-green-400 text-sm">
							upop.confirm.error('¿Eliminar?');
						</code>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Documentation Section -->
	<section id="documentacion" class="py-20 bg-white/30 backdrop-blur-sm">
		<div class="max-w-4xl mx-auto px-6">
			<h2 class="text-4xl font-bold text-center mb-12 text-gray-800">Documentación</h2>
			
			<div class="space-y-8">
				<!-- Alert API -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">API de Alertas</h3>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto mb-4">
						<code class="text-blue-300 text-sm">
							upop.alert.info(mensaje, opciones)<br>
							upop.alert.success(mensaje, opciones)<br>
							upop.alert.error(mensaje, opciones)<br>
							upop.alert.warning(mensaje, opciones)
						</code>
					</div>
					<div class="space-y-2 text-sm">
						<p><strong>mensaje:</strong> <code class="bg-gray-100 px-2 py-1 rounded">string</code> - Texto a mostrar</p>
						<p><strong>opciones:</strong> <code class="bg-gray-100 px-2 py-1 rounded">object</code> - Configuración opcional</p>
						<ul class="ml-4 space-y-1 text-gray-600">
							<li>• <code>botonTexto</code>: Texto del botón (default: "Aceptar")</li>
							<li>• <code>onClose</code>: Callback al cerrar</li>
						</ul>
					</div>
				</div>

				<!-- Toast API -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">API de Toasts</h3>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto mb-4">
						<code class="text-green-300 text-sm">
							upop.toast.info(mensaje, duracion, posicion)<br>
							upop.toast.success(mensaje, duracion, posicion)<br>
							upop.toast.error(mensaje, duracion, posicion)<br>
							upop.toast.warning(mensaje, duracion, posicion)
						</code>
					</div>
					<div class="space-y-2 text-sm">
						<p><strong>mensaje:</strong> <code class="bg-gray-100 px-2 py-1 rounded">string</code> - Texto a mostrar</p>
						<p><strong>duracion:</strong> <code class="bg-gray-100 px-2 py-1 rounded">number</code> - Duración en ms (default: 3000)</p>
						<p><strong>posicion:</strong> <code class="bg-gray-100 px-2 py-1 rounded">string</code> - Posición: "top-right", "top-left", "bottom-right", "bottom-left"</p>
					</div>
				</div>

				<!-- Confirm API -->
				<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
					<h3 class="text-2xl font-semibold mb-4 text-gray-800">API de Confirmaciones</h3>
					<div class="bg-gray-900 rounded-xl p-4 overflow-x-auto mb-4">
						<code class="text-yellow-300 text-sm">
							upop.confirm.info(mensaje, opciones)<br>
							upop.confirm.success(mensaje, opciones)<br>
							upop.confirm.error(mensaje, opciones)<br>
							upop.confirm.warning(mensaje, opciones)
						</code>
					</div>
					<div class="space-y-2 text-sm">
						<p><strong>mensaje:</strong> <code class="bg-gray-100 px-2 py-1 rounded">string</code> - Texto a mostrar</p>
						<p><strong>opciones:</strong> <code class="bg-gray-100 px-2 py-1 rounded">object</code> - Configuración opcional</p>
						<ul class="ml-4 space-y-1 text-gray-600">
							<li>• <code>textoAceptar</code>: Texto del botón aceptar (default: "Aceptar")</li>
							<li>• <code>textoCancelar</code>: Texto del botón cancelar (default: "Cancelar")</li>
							<li>• <code>onConfirm</code>: Callback al confirmar</li>
							<li>• <code>onCancel</code>: Callback al cancelar</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Playground Section -->
	<section id="playground" class="py-20">
		<div class="max-w-4xl mx-auto px-6">
			<h2 class="text-4xl font-bold text-center mb-12 text-gray-800">Playground</h2>
			
			<div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50">
				<div class="grid md:grid-cols-2 gap-8">
					<div>
						<h3 class="text-xl font-semibold mb-4 text-gray-800">Configuración</h3>
						<div class="space-y-4">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">Tipo</label>
								<select id="playground-type" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
									<option value="alert">Alert</option>
									<option value="toast">Toast</option>
									<option value="confirm">Confirm</option>
								</select>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">Estilo</label>
								<select id="playground-style" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
									<option value="info">Info</option>
									<option value="success">Éxito</option>
									<option value="error">Error</option>
									<option value="warning">Advertencia</option>
								</select>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">Mensaje</label>
								<input id="playground-message" type="text" value="Este es un mensaje de prueba" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
							</div>
							<div id="toast-options" class="hidden">
								<label class="block text-sm font-medium text-gray-700 mb-2">Posición</label>
								<select id="playground-position" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
									<option value="top-right">Top Right</option>
									<option value="top-left">Top Left</option>
									<option value="bottom-right">Bottom Right</option>
									<option value="bottom-left">Bottom Left</option>
								</select>
							</div>
						</div>
						<button id="playground-test" class="mt-6 w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200">
							Probar
						</button>
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-4 text-gray-800">Código Generado</h3>
						<div id="playground-code" class="bg-gray-900 rounded-xl p-4 h-64 overflow-auto">
							<code class="text-green-400 text-sm">
								upop.alert.info('Este es un mensaje de prueba');
							</code>
						</div>
						<button id="copy-code" class="mt-4 w-full px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">
							Copiar Código
						</button>
					</div>
				</div>
			</div>
		</div>
	</section>

	<script>
		// Import upop
		import upop from 'upop';

		// Demo button
		document.getElementById('demo-btn')?.addEventListener('click', () => {
			upop.alert.success('¡Bienvenido a upop.js!', {
				botonTexto: 'Genial',
				onClose: () => upop.toast.info('¡Explora más ejemplos abajo!', 3000, 'top-right')
			});
		});

		// Alert demos
		document.querySelectorAll('.alert-demo').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const type = e.target.dataset.type;
				const messages = {
					info: 'Esta es una alerta informativa',
					success: '¡Operación completada con éxito!',
					error: 'Ha ocurrido un error',
					warning: 'Advertencia: revisa esta información'
				};
				upop.alert[type](messages[type]);
			});
		});

		// Toast demos
		document.querySelectorAll('.toast-demo').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const type = e.target.dataset.type;
				const messages = {
					info: 'Información importante',
					success: '¡Guardado correctamente!',
					error: 'Error al procesar',
					warning: 'Atención requerida'
				};
				upop.toast[type](messages[type], 3000, 'top-right');
			});
		});

		// Confirm demos
		document.querySelectorAll('.confirm-demo').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const type = e.target.dataset.type;
				const messages = {
					info: '¿Deseas continuar con esta acción?',
					success: '¿Confirmar la operación exitosa?',
					error: '¿Estás seguro de eliminar este elemento?',
					warning: '¿Proceder con esta acción de riesgo?'
				};
				upop.confirm[type](messages[type], {
					onConfirm: () => upop.toast.success('¡Confirmado!', 2000, 'top-right'),
					onCancel: () => upop.toast.info('Cancelado', 2000, 'top-right')
				});
			});
		});

		// Playground functionality
		const playgroundType = document.getElementById('playground-type');
		const playgroundStyle = document.getElementById('playground-style');
		const playgroundMessage = document.getElementById('playground-message');
		const playgroundPosition = document.getElementById('playground-position');
		const playgroundTest = document.getElementById('playground-test');
		const playgroundCode = document.getElementById('playground-code');
		const toastOptions = document.getElementById('toast-options');
		const copyCode = document.getElementById('copy-code');

		function updatePlayground() {
			const type = playgroundType?.value;
			const style = playgroundStyle?.value;
			const message = playgroundMessage?.value || 'Mensaje de prueba';
			const position = playgroundPosition?.value || 'top-right';

			// Show/hide toast options
			if (type === 'toast') {
				toastOptions?.classList.remove('hidden');
			} else {
				toastOptions?.classList.add('hidden');
			}

			// Generate code
			let code = '';
			if (type === 'toast') {
				code = `upop.toast.${style}('${message}', 3000, '${position}');`;
			} else if (type === 'confirm') {
				code = `upop.confirm.${style}('${message}', {\n  onConfirm: () => console.log('Confirmado'),\n  onCancel: () => console.log('Cancelado')\n});`;
			} else {
				code = `upop.alert.${style}('${message}');`;
			}

			if (playgroundCode) {
				playgroundCode.innerHTML = `<code class="text-green-400 text-sm">${code}</code>`;
			}
		}

		// Event listeners for playground
		playgroundType?.addEventListener('change', updatePlayground);
		playgroundStyle?.addEventListener('change', updatePlayground);
		playgroundMessage?.addEventListener('input', updatePlayground);
		playgroundPosition?.addEventListener('change', updatePlayground);

		playgroundTest?.addEventListener('click', () => {
			const type = playgroundType?.value;
			const style = playgroundStyle?.value;
			const message = playgroundMessage?.value || 'Mensaje de prueba';
			const position = playgroundPosition?.value || 'top-right';

			if (type === 'toast') {
				upop.toast[style](message, 3000, position);
			} else if (type === 'confirm') {
				upop.confirm[style](message, {
					onConfirm: () => upop.toast.success('¡Confirmado!', 2000, 'top-right'),
					onCancel: () => upop.toast.info('Cancelado', 2000, 'top-right')
				});
			} else {
				upop.alert[style](message);
			}
		});

		copyCode?.addEventListener('click', async () => {
			const code = playgroundCode?.textContent;
			if (code) {
				try {
					await navigator.clipboard.writeText(code);
					upop.toast.success('¡Código copiado!', 2000, 'top-right');
				} catch (err) {
					upop.toast.error('Error al copiar', 2000, 'top-right');
				}
			}
		});

		// Initialize playground
		updatePlayground();

		// Smooth scrolling for navigation
		document.querySelectorAll('a[href^="#"]').forEach(anchor => {
			anchor.addEventListener('click', function (e) {
				e.preventDefault();
				const target = document.querySelector(this.getAttribute('href'));
				if (target) {
					target.scrollIntoView({
						behavior: 'smooth',
						block: 'start'
					});
				}
			});
		});
	</script>

	<style>
		@keyframes fade-in-up {
			from {
				opacity: 0;
				transform: translateY(30px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.animate-fade-in-up {
			animation: fade-in-up 0.8s ease-out;
		}

		/* Custom scrollbar */
		::-webkit-scrollbar {
			width: 8px;
		}

		::-webkit-scrollbar-track {
			background: #f1f1f1;
			border-radius: 4px;
		}

		::-webkit-scrollbar-thumb {
			background: #c1c1c1;
			border-radius: 4px;
		}

		::-webkit-scrollbar-thumb:hover {
			background: #a8a8a8;
		}
	</style>
</Layout>
